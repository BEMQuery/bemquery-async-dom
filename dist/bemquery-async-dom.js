/*! bemquery-async-dom v0.1.5 | (c) 2016-2017 BEMQuery team | MIT license (see LICENSE) */import{BEMQuery}from'bemquery-core';class Batch{constructor(){this.read=[],this.write=[]}add(a,b){if('read'!==a&&'write'!==a)throw new TypeError('Type must be either \'read\' or \'write\'.');if('function'!=typeof b)throw new TypeError('Task must be a function.');this[a].push(b)}run(a='read'){if('read'!==a&&'write'!==a)throw new TypeError('Type must be either \'read\' or \'write\'.');return new Promise(b=>{requestAnimationFrame(()=>{const c=[];return this[a].forEach(d=>{c.push(d())}),this[a]=[],b(c)})})}}BEMQuery.prototype.read=function(){return this.batch||(this.batch=new Batch),this.batch.run('read')},BEMQuery.prototype.write=function(){return this.batch||(this.batch=new Batch),this.batch.run('write')},BEMQuery.prototype.html=function(a){return this.batch||(this.batch=new Batch),'undefined'==typeof a?this.batch.add('read',()=>{const b=this.elements,c=[];return b.forEach(d=>{c.push(d.innerHTML)}),c}):(a+='',this.batch.add('write',()=>{const b=this.elements;b.forEach(c=>{c.innerHTML=a})})),this};function processClasses(a,b){const c=[];return[].forEach.call(b.classList,d=>{const e=a.getStateFromClass(d+'');e&&c.push(e)}),c}BEMQuery.prototype.getStates=function(){this.batch||(this.batch=new Batch);const a=this.elements;return this.batch.add('read',()=>{const b=[];return a.forEach(c=>{b.push(processClasses(this.converter,c))}),b}),this};
//# sourceMappingURL=bemquery-async-dom.js.map
