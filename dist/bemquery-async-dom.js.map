{"version":3,"file":null,"sources":["../src/batch.js","../src/utils.js","../src/html.js","../src/state.js","../src/index.js"],"sourcesContent":["'use strict';\n\n/** Class storing queue of DOM operations. */\nclass Batch {\n\t/**\n\t * Constructing new batch.\n\t *\n\t * @class\n\t */\n\tconstructor() {\n\t\tthis.read = [];\n\t\tthis.write = [];\n\t}\n\n\t/**\n\t * Add new operation to the batch.\n\t *\n\t * @param {String} type Type of operation. Must be either \"read\" or \"write\".\n\t * @param {Function} fn Operation to be fired.\n\t * @return {BEMQuery} Current BEMQuery instance.\n\t */\n\tadd( type, fn ) {\n\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\tif ( typeof fn !== 'function' ) {\n\t\t\tthrow new TypeError( 'Task must be a function.' );\n\t\t}\n\n\t\tthis[ type ].push( fn );\n\t}\n\n\t/**\n\t * Run operations of given type.\n\t *\n\t * @param {String} type Type of operations to run. Must be either \"read\" or \"write\".\n\t * @return {Promise} Promise that will be fulfilled after running all tasks.\n\t */\n\trun( type = 'read' ) {\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\treturn new Promise( ( resolve ) => {\n\t\t\trequestAnimationFrame( () => {\n\t\t\t\tconst results = [];\n\n\t\t\t\tthis[ type ].forEach( ( fn ) => {\n\t\t\t\t\tresults.push( fn() );\n\t\t\t\t} );\n\n\t\t\t\tthis[ type ] = [];\n\n\t\t\t\treturn resolve( results );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\nexport default Batch;\n","'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\n/**\n * Method that runs all read operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.read = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'read' );\n};\n\n/**\n * Method that runs all write operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.write = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'write' );\n};\n","'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\n/**\n * Method for getting/setting inner HTML of all elements in collection\n *\n * @param {String} [newHTML] The new inner HTML value. If not specified,\n * the method will work as getter.\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.html = function( newHTML ) {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tif ( typeof newHTML !== 'undefined' ) {\n\t\tnewHTML = String( newHTML );\n\n\t\tthis.batch.add( 'write', () => {\n\t\t\tconst elements = this.elements;\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\telement.innerHTML = newHTML;\n\t\t\t} );\n\t\t} );\n\t} else {\n\t\tthis.batch.add( 'read', () => {\n\t\t\tconst elements = this.elements;\n\t\t\tconst htmls = [];\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\thtmls.push( element.innerHTML );\n\t\t\t} );\n\n\t\t\treturn htmls;\n\t\t} );\n\t}\n\n\treturn this;\n};\n","'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\nfunction processClasses( converter, element ) {\n\tconst states = [];\n\n\t[].forEach.call( element.classList, ( className ) => {\n\t\tconst state = converter.getStateFromClass( String( className ) );\n\n\t\tif ( state ) {\n\t\t\tstates.push( state );\n\t\t}\n\t} );\n\n\treturn states;\n}\n\n/**\n * Method for getting states from all elements in collection.\n *\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.getStates = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tconst elements = this.elements;\n\n\tthis.batch.add( 'read', () => {\n\t\tconst result = [];\n\n\t\telements.forEach( ( element ) => {\n\t\t\tresult.push( processClasses( this.converter, element ) );\n\t\t} );\n\n\t\treturn result;\n\t} );\n\n\treturn this;\n};\n","'use strict';\n\n/** @class BEMQuery */\nimport './utils';\nimport './html';\nimport './state';\n"],"names":[],"mappings":"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"}