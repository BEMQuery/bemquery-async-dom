/*! bemquery-async-dom v0.1.5 | (c) 2016-2017 BEMQuery team | MIT license (see LICENSE) */(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?b(require('bemquery-core')):'function'==typeof define&&define.amd?define(['bemquery-core'],b):b(a.bemquery)})(this,function(a){'use strict';function b(d,e){const f=[];return[].forEach.call(e.classList,g=>{const h=d.getStateFromClass(g+'');h&&f.push(h)}),f}class c{constructor(){this.read=[],this.write=[]}add(d,e){if('read'!==d&&'write'!==d)throw new TypeError('Type must be either \'read\' or \'write\'.');if('function'!=typeof e)throw new TypeError('Task must be a function.');this[d].push(e)}run(d='read'){if('read'!==d&&'write'!==d)throw new TypeError('Type must be either \'read\' or \'write\'.');return new Promise(e=>{requestAnimationFrame(()=>{const f=[];return this[d].forEach(g=>{f.push(g())}),this[d]=[],e(f)})})}}a.BEMQuery.prototype.read=function(){return this.batch||(this.batch=new c),this.batch.run('read')},a.BEMQuery.prototype.write=function(){return this.batch||(this.batch=new c),this.batch.run('write')},a.BEMQuery.prototype.html=function(d){return this.batch||(this.batch=new c),'undefined'==typeof d?this.batch.add('read',()=>{const e=this.elements,f=[];return e.forEach(g=>{f.push(g.innerHTML)}),f}):(d+='',this.batch.add('write',()=>{const e=this.elements;e.forEach(f=>{f.innerHTML=d})})),this},a.BEMQuery.prototype.getStates=function(){this.batch||(this.batch=new c);const d=this.elements;return this.batch.add('read',()=>{const e=[];return d.forEach(f=>{e.push(b(this.converter,f))}),e}),this}});
//# sourceMappingURL=bemquery-async-dom.umd.js.map
