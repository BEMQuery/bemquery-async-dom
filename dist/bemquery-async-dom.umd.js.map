{"version":3,"file":"bemquery-async-dom.umd.js","sources":["../src/state.js","../src/batch.js","../src/utils.js","../src/html.js"],"sourcesContent":["'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\nfunction processClasses( converter, element ) {\n\tconst states = [];\n\n\t[].forEach.call( element.classList, ( className ) => {\n\t\tconst state = converter.getStateFromClass( String( className ) );\n\n\t\tif ( state ) {\n\t\t\tstates.push( state );\n\t\t}\n\t} );\n\n\treturn states;\n}\n\n/**\n * Method for getting states from all elements in collection.\n *\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.getStates = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tconst elements = this.elements;\n\n\tthis.batch.add( 'read', () => {\n\t\tconst result = [];\n\n\t\telements.forEach( ( element ) => {\n\t\t\tresult.push( processClasses( this.converter, element ) );\n\t\t} );\n\n\t\treturn result;\n\t} );\n\n\treturn this;\n};\n","'use strict';\n\n/** Class storing queue of DOM operations. */\nclass Batch {\n\t/**\n\t * Constructing new batch.\n\t *\n\t * @class\n\t */\n\tconstructor() {\n\t\tthis.read = [];\n\t\tthis.write = [];\n\t}\n\n\t/**\n\t * Add new operation to the batch.\n\t *\n\t * @param {String} type Type of operation. Must be either \"read\" or \"write\".\n\t * @param {Function} fn Operation to be fired.\n\t * @return {BEMQuery} Current BEMQuery instance.\n\t */\n\tadd( type, fn ) {\n\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\tif ( typeof fn !== 'function' ) {\n\t\t\tthrow new TypeError( 'Task must be a function.' );\n\t\t}\n\n\t\tthis[ type ].push( fn );\n\t}\n\n\t/**\n\t * Run operations of given type.\n\t *\n\t * @param {String} type Type of operations to run. Must be either \"read\" or \"write\".\n\t * @return {Promise} Promise that will be fulfilled after running all tasks.\n\t */\n\trun( type = 'read' ) {\n\t\tif ( type !== 'read' && type !== 'write' ) {\n\t\t\tthrow new TypeError( 'Type must be either \\'read\\' or \\'write\\'.' );\n\t\t}\n\n\t\treturn new Promise( ( resolve ) => {\n\t\t\trequestAnimationFrame( () => {\n\t\t\t\tconst results = [];\n\n\t\t\t\tthis[ type ].forEach( ( fn ) => {\n\t\t\t\t\tresults.push( fn() );\n\t\t\t\t} );\n\n\t\t\t\tthis[ type ] = [];\n\n\t\t\t\treturn resolve( results );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\nexport default Batch;\n","'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\n/**\n * Method that runs all read operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.read = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'read' );\n};\n\n/**\n * Method that runs all write operations stored in batch\n *\n * @return {Promise} Promise returned by batch.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.write = function() {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\treturn this.batch.run( 'write' );\n};\n","'use strict';\n\nimport { BEMQuery as BEMQuery } from 'bemquery-core';\nimport Batch from './batch';\n\n/**\n * Method for getting/setting inner HTML of all elements in collection\n *\n * @param {String} [newHTML] The new inner HTML value. If not specified,\n * the method will work as getter.\n * @return {BEMQuery} Current BEMQuery instance.\n * @memberof BEMQuery\n */\nBEMQuery.prototype.html = function( newHTML ) {\n\tif ( !this.batch ) {\n\t\tthis.batch = new Batch();\n\t}\n\n\tif ( typeof newHTML !== 'undefined' ) {\n\t\tnewHTML = String( newHTML );\n\n\t\tthis.batch.add( 'write', () => {\n\t\t\tconst elements = this.elements;\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\telement.innerHTML = newHTML;\n\t\t\t} );\n\t\t} );\n\t} else {\n\t\tthis.batch.add( 'read', () => {\n\t\t\tconst elements = this.elements;\n\t\t\tconst htmls = [];\n\n\t\t\telements.forEach( ( element ) => {\n\t\t\t\thtmls.push( element.innerHTML );\n\t\t\t} );\n\n\t\t\treturn htmls;\n\t\t} );\n\t}\n\n\treturn this;\n};\n"],"names":["processClasses","converter","element","states","forEach","call","classList","className","state","getStateFromClass","push","Batch","constructor","read","write","add","type","fn","TypeError","run","Promise","resolve","requestAnimationFrame","results","BEMQuery","prototype","batch","html","newHTML","elements","htmls","innerHTML","getStates","result"],"mappings":"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"}